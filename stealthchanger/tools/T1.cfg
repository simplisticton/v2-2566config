# This file contains common pin mappings for the BIGTREETECH EBBCan
# Canbus board. To use this config, the firmware should be compiled for the
# RP2040 with "USB" or "CAN bus (on gpio4/gpio5)".
# The "EBB Can" micro-controller will be used to control the components on the nozzle.

# See docs/Config_Reference.md for a description of parameters.

[mcu T1]
canbus_uuid: 3ecf2c71612f

[temperature_sensor T1_NTC]
sensor_type: Generic 3950
sensor_pin: T1:gpio28

[adxl345]
cs_pin: T1:gpio1
spi_software_sclk_pin: T1:gpio2
spi_software_mosi_pin: T1:gpio0
spi_software_miso_pin: T1:gpio3
axes_map: z,-y,x

[resonance_tester]
probe_points: 150, 150, 20
accel_chip: adxl345

[extruder1]
step_pin: T1:gpio18
dir_pin: !T1:gpio19
enable_pin: !T1:gpio17
rotation_distance: 22.83092345273196	#Bondtech 5mm Drive Gears
microsteps: 8
gear_ratio: 50:10				#BMG Gear Ratio for CW2
full_steps_per_rotation: 200
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: T1:gpio7
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: T1:gpio27
control: pid
pid_Kp: 36.925
pid_Ki: 4.559
pid_Kd: 74.771
min_temp: 0
max_temp: 300
min_extrude_temp: 5
max_extrude_cross_section: 5
# // PID parameters: pid_Kp=36.925 pid_Ki=4.559 pid_Kd=74.771

[tmc2209 extruder1]
uart_pin: T1:gpio20
run_current: 0.525
sense_resistor: 0.110
# stealthchop_threshold: 999999

[fan_generic t1_partfan]
pin: T1:gpio13

[heater_fan t1_fan]
pin: T1:gpio14
heater: extruder1
heater_temp: 50.0

[gcode_macro T1]
variable_color: ""
gcode:
  SELECT_TOOL T=1

[tool T1]
tool_number: 1
extruder: extruder1
params_type: 'rods_mini_hookon'
fan: fan_generic t1_partfan
gcode_x_offset: 0
gcode_y_offset: 0
gcode_z_offset: 0
# Position with the toolhead aligned with the dock
params_park_x: 0.0
params_park_y: -7.7
params_park_z: 349.5
params_input_shaper_type_x: 'mzv'
params_input_shaper_freq_x: 52
params_input_shaper_type_y: 'mzv'
params_input_shaper_freq_y: 37.2

[tool_probe T1]
pin: T1:gpio24
tool: 1
x_offset: 0
y_offset: 0
z_offset: 0
speed: 5.0
samples: 3
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.02
samples_tolerance_retries: 5
activate_gcode:
    _TAP_PROBE_ACTIVATE HEATER=extruder1

[neopixel t1_leds]
pin: T1:gpio16
chain_count: 3
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRBW
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
initial_RED: 1.0
initial_GREEN: 1.0
initial_BLUE: 0.0
initial_WHITE: 0.0

# Macros for setting the status leds on the Voron StealthBurner toolhead (or for any neopixel-type leds).
#
# You will need to configure a neopixel (or other addressable led, such as dotstar). See
# https://www.klipper3d.org/Config_Reference.html#neopixel for configuration details.


#####################################
#           INSTRUCTIONS            #
#####################################
# How to use all this stuff:
#
#     1.  Copy this .cfg file into your Klipper config directory and then add [include stealthburner_leds.cfg]
#         to the top of your printer.cfg in order for register the LEDs and macros with Klipper.
#     2.  Define your LEDs by editing [neopixel sb_leds] below and entering the data pin from your control board
#         as well as the color order.
#
#           Note: RGB and RGBW are different and must be defined explicitly.  RGB and RGBW are also not able to 
#                 be mix-and-matched in the same chain. A separate data line would be needed for proper functioning.
#
#                 RGBW LEDs will have a visible yellow-ish phosphor section to the chip.  If your LEDs do not have
#                 this yellow portion, you have RGB LEDs.
#
#     3.  Save your config and restart Klipper.
#
#           Note: We set RED and BLUE to 1.0 to make it easier for users and supporters to detect 
#                 misconfigurations or miswiring. The default color format is for Neopixels with a dedicated 
#                 white LED. On startup, all three SB LEDs should light up.
#
#                 If you get random colors across your LEDs, change the color_order to GRB and restart. Then
#                 omit the W for each suggested color_order in the next paragraph.
#
#                 If you get MAGENTA, your  color order is correct. If you get CYAN, you need to use RGBW. If
#                 you get YELLOW, you need to use BRGW (note that BRG is only supported in the latest Klipper
#                 version).
#
#     4.  Once you have confirmed that the LEDs are set up correctly, you must now decide where you want 
#         these macros called up...which means adding them to your existing gcode macros.  NOTHING will happen
#         unless you add the STATUS_????? macros to your existing gcode macros.  
#
#           Example: add STATUS_LEVELING to the beginning of your QGL gcode macro, and then add STATUS_READY 
#                    to the end of it to set the logo LED and nozzle LEDs back to the `ready` state.
#
#           Example: add STATUS_CLEANING to the beginning of your nozzle-cleaning macro, and then STATUS_READY
#                    to the end of it to return the LEDs back to `ready` state.
#
#     5.  Feel free to change colors of each macro, create new ones if you have a need to.  The macros provided below
#         are just an example of what is possible.  If you want to try some more complex animations, you will most
#         likely have to use WLED with Moonraker and a small micro-controller (please see the LED thread for help inside
#         of the stealthburner_beta channel on Discord).
#
#####################################
#       END INSTRUCTRUCTIONS        #
#####################################


# [neopixel sb_leds_t1]
# pin: PB0
# #   The pin connected to the neopixel. This parameter must be provided.
# chain_count: 3
# #   The number of Neopixel chips that are "daisy chained" to the
# #   provided pin. The default is 1 (which indicates only a single
# #   Neopixel is connected to the pin).
# color_order: GRBW
# #   Set the pixel order required by the LED hardware. Options are GRB,
# #   RGB, GRBW, or RGBW. The default is GRB.
# initial_RED: 1.0
# initial_GREEN: 0.0
# initial_BLUE: 1.0
# initial_WHITE: 0.0
# #   Sets the initial LED color of the Neopixel. Each value should be
# #   between 0.0 and 1.0. The WHITE option is only available on RGBW
# #   LEDs. The default for each color is 0.#

# # Most configuration for the macros can be done by modifying the variables in the _sb_vars macro
# # at the start of this file.

##########
# MACROS #
##########

# The following status macros are available (these go inside of your macros):
#
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
#    STATUS_PRINTING
#    STATUS_PAUSED
#
# With additional macros for basic control:
#
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF
#
# Contributed by Voron discord users wile.e, Tetsunosuke, and etherwalker


[gcode_macro _sb_vars_t1]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
        'logo': { # Colors for logo states
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
            'maintenance': {'r': 0.2, 'g': 0.1, 'b': 0, 'w': 0},
            'paused': {'r': 0.4, 'g': 0.0, 'b': 0, 'w': 0.1},
        },
        'nozzle': { # Colors for nozzle states
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
        },
        'thermal': {
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
        }
    }
variable_logo_led_name:         "t1_leds" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "1" 
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "t1_leds"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "2,3"
# A comma-separated list of indexes of LEDs in the nozzle
gcode:
    # This section is required.  Do Not Delete.


[gcode_macro _set_sb_leds_t1]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}

    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name_t1]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds_t1 led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds_t1]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds_t1 led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds_t1]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds_t1 led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off_t1]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds_t1 red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on_t1]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name_t1 leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off_t1]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name_t1 leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off_t1]
gcode:
    set_logo_leds_off_t1 transmit=0
    set_nozzle_leds_off_t1

[gcode_macro status_ready_t1]
gcode:
    _set_sb_leds_by_name_t1 leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name_t1 leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy_t1]
gcode:
    _set_sb_leds_by_name_t1 leds="logo" color="busy" transmit=0
    set_nozzle_leds_on_t1

[gcode_macro status_heating_t1]
gcode:
    _set_sb_leds_by_name_t1 leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name_t1 leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling_t1]
gcode:
    _set_sb_leds_by_name_t1 leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on_t1

[gcode_macro status_homing_t1]
gcode:
    _set_sb_leds_by_name_t1 leds="logo" color="homing" transmit=0
    set_nozzle_leds_on_t1

[gcode_macro status_cleaning_t1]
gcode:
    _set_sb_leds_by_name_t1 leds="logo" color="cleaning" transmit=0
    set_nozzle_leds_on_t1

[gcode_macro status_meshing_t1]
gcode:
    _set_sb_leds_by_name_t1 leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on_t1

[gcode_macro status_calibrating_z_t1]
gcode:
    _set_sb_leds_by_name_t1 leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on_t1

[gcode_macro status_printing_t1]
gcode:
    _set_sb_leds_by_name_t1 leds="logo" color="printing" transmit=0
    set_nozzle_leds_on_t1

[gcode_macro STATUS_MAINTENANCE_t1]
gcode:
    _set_sb_leds_by_name_t1 leds="logo" color="maintenance" transmit=0

    set_nozzle_leds_on_t1

[gcode_macro STATUS_PAUSED_t1]
gcode:
    _set_sb_leds_by_name_t1 leds="logo" color="paused" transmit=0
    set_nozzle_leds_on_t1
