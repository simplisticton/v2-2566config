#####################################################################
# 	Macros
#####################################################################
[delayed_gcode _TEMP_MONITOR]
initial_duration: 60.0
gcode:
  {% set mcu_target = 40 %}
  {% set host_target = 55 %}
  {% set encl_target = 60 %}
  {% set verbose = True %}
  {% set period = 60 %}
  {% set default_speed = 0.5 %}
  {% set printing_speed = 0.25 %}
  {% set max_speed = 1.0 %}
  {% set min_speed = 0.0 %}
  {% set threshold = 1.1 %}

  {% set mcu = printer['temperature_sensor Mcu_temp'].temperature | float %}
  {% set encl = printer['temperature_sensor enclosure_temp'].temperature | float %}
  {% set host = printer['temperature_sensor Host_temp'].temperature | float %}

  {% if verbose %}
    { action_respond_info("Entering Temp Montor routine") }
    { action_respond_info("Printer state %s" % printer.idle_timeout.state) }
  {% endif %}

  {% if printer.idle_timeout.state == 'Printing' %}
	{% set min_speed = printing_speed %}
  {% endif %}

  {% if printer.idle_timeout.state != 'Idle' %}

	  {% if mcu > (mcu_target * threshold) or host > (host_target * threshold) %}
	    {% if verbose %}
	      { action_respond_info("MCU/Host temp (%.1f/%.1f) exceeds max fan threshold (%.1f/%.1f), setting cooling to %.0f%%" % (mcu, host, mcu_target*threshold,host_target * threshold,max_speed*100)) }
	    {% endif %}
	    SET_FAN_SPEED FAN=cooling_fan SPEED={max_speed}
	  {% elif mcu > mcu_target or host > host_target %}
	    {% if verbose %}
	      { action_respond_info("MCU/Host temp (%.1f/%.1f) above target temp (%.1f/%.1f), setting cooling to %.0f%%" % (mcu, host, mcu_target, host_target,default_speed*100)) }
	    {% endif %}    
	    SET_FAN_SPEED FAN=cooling_fan SPEED={default_speed}
	  {% else %}
	    {% if verbose %}
	      { action_respond_info("MCU/Host (%.1f/%.1f) temp below target temp (%.1f,%.1f) while %s, setting cooling to %.0f%%" % (mcu, host, mcu_target, host_target,printer.idle_timeout.state,min_speed*100)) }
	    {% endif %}
	    SET_FAN_SPEED FAN=cooling_fan SPEED={min_speed}
	  {% endif %}
	  
	  {% if encl > (encl_target * threshold) %}
	    {% if verbose %}
	      { action_respond_info("Enclosure temp (%.1f) exceeds max fan threshold (%.1f), setting exhaust to %.0f%%" % (encl, encl_target * threshold,max_speed*100)) }
	    {% endif %}
	    SET_FAN_SPEED FAN=exhaust_fan SPEED={max_speed}
	  {% elif encl > encl_target %}
	    {% if verbose %}
	      { action_respond_info("Enclosure temp (%.1f) above target temp (%.1f), setting exhaust to %.0f%%" % (encl, encl_target,default_speed*100)) }
	    {% endif %}    
	    SET_FAN_SPEED FAN=exhaust_fan SPEED={default_speed}
	  {% else %}
	    {% if verbose %}
	      { action_respond_info("Enclosure temp (%.1f) below target temp (%.1f), setting exhaust to %.0f%%" % (encl, encl_target,min_speed*100)) }
	    {% endif %}
	    SET_FAN_SPEED FAN=exhaust_fan SPEED={min_speed}
	  {% endif %}
  {% else %}
	{% if verbose %}
	  { action_respond_info("Printer idle, skipping temperature checks. MCU: %.1f, Host: %.1f, Enclosure: %.1f." % (mcu, host, encl )) }
	{% endif %}
  {% endif %}

  {% if verbose %}
    { action_respond_info("Exiting Temp Montor routine") }
  {% endif %}

  UPDATE_DELAYED_GCODE ID=_TEMP_MONITOR DURATION={period}

[gcode_macro START_TEMP_MONITOR]
gcode:
 UPDATE_DELAYED_GCODE ID=_TEMP_MONITOR DURATION=1

[gcode_macro STOP_TEMP_MONITOR]
gcode:
  UPDATE_DELAYED_GCODE ID=_TEMP_MONITOR DURATION=0

[gcode_macro EXHAUST_TIME]
gcode:
  {% set delay = params.DELAY|default(300)|float %}
  {% set power = params.POWER|default(100)|float %}

  SET_FAN_SPEED FAN=exhaust_fan SPEED={power}
  UPDATE_DELAYED_GCODE ID=_DISABLE_EXHAUST DURATION={delay}

[gcode_macro WAKEUP]
gcode:
  SET_CASELIGHT_ON
  START_TEMP_MONITOR
  STATUS_READY

[gcode_macro SLEEP]
gcode:
  M118 Entering sleep mode
  M84
  M107
  STOP_TEMP_MONITOR
  TURN_OFF_HEATERS
  SET_CASELIGHT_OFF
  UPDATE_DELAYED_GCODE ID=_DISABLE_COOLING DURATION=300
  UPDATE_DELAYED_GCODE ID=_DISABLE_EXHAUST DURATION=300
  STATUS_OFF
  
[delayed_gcode _DISABLE_COOLING]
gcode:
  SET_FAN_SPEED FAN=cooling_fan SPEED=0

[delayed_gcode _DISABLE_EXHAUST]
gcode:
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117

[delayed_gcode _SET_CASELIGHT_OFF]
gcode:
  SET_CASELIGHT_OFF

[gcode_macro HOME_IF_NEEDED]
gcode:
    {% set verbose = params.VERBOSE|default(False) %}

    {% if not (('xy' in printer.toolhead.homed_axes) or ('z' in printer.toolhead.homed_axes)) %}
        {% if verbose %}
            { action_respond_info("Homing!") }
        {% endif %}
        G28
    {% endif %}

[gcode_macro MAINTENANCE]
description: move the toolhead to a convenient position for working on it
gcode:
  WAKEUP
  HOME_IF_NEEDED
  g0 X150 Y0 Z150 F10000

[gcode_macro SET_CASELIGHT_OFF]
description: Turn off the caselight LEDs
gcode:
  SET_PIN PIN=caselight VALUE=0

[gcode_macro SET_CASELIGHT_ON]
description: Turn on the caselight LEDs
gcode:
  SET_PIN PIN=caselight VALUE=1

[gcode_macro G32]
gcode:
    WAKEUP
    BED_MESH_CLEAR
    HOME_IF_NEEDED
    QUAD_GANTRY_LEVEL
    CALIBRATE_Z                  # as per https://github.com/protoloft/klipper_z_calibration, a second G28 is not needed

[gcode_macro HEATSOAK]
description: Preheat the chamber using the bed. BED=105 AMBIENT=40 DELAY=15 (minutes)
gcode:
     {% set BED = params.BED|default(105)|float %}
     {% set AMBIENT = params.AMBIENT|default(40)|float %}
     {% set DELAY = params.DELAY|default(15)|float %}
     {% set mid_x = printer.toolhead.axis_maximum.x|float / 2.0 %}
     {% set mid_y = printer.toolhead.axis_maximum.y|float / 2.0 %}
     STATUS_HEATING
     M117 Bed:{BED}C Amb:{AMBIENT}C
     M118 Preheating {BED}C for {DELAY} minutes
     M104 S0
     M140 S{BED}
     HOME_IF_NEEDED
     G0 X{mid_x} Y{mid_y} Z0.2 F2000
     M190 S{BED}
     {% set D_block = DELAY|float / 10.0  %}
     {% for i in range(10) %}
      {% set D_time = (DELAY|float - D_block * i|float)  %}
      M117 Waiting {D_time} minutes...
      M118 Waiting {D_time} minutes...
      G4 P{D_block * 60.0 * 1000.0}
     {% endfor %}
     M117 Waiting for {AMBIENT}C
     M118 Waiting for {AMBIENT}C
     TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={AMBIENT}
     STATUS_READY
     M117 Heatsoak complete.
     M118 Heatsoak complete.
     UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=60

[gcode_macro PRINT_START]
gcode:
    {% set BED = params.BED|default(65)|float %}
    {% set EXTRUDER = params.EXTRUDER|default(210)|float %}
    WAKEUP
    STATUS_BUSY
    M117 Starting up...
    SET_CASELIGHT_ON
    G21                          ; set to mm
    M220 S100			               ; set print speed to 100%
    M221 S100			               ; set flow rate to 100%
    M107                         ; disable fans
    G90                          ; absolute positioning
    M83                          ; extruder to relative mode
    G92 E0                       ; set extruder to zero
    M140 S{BED}                  ; set bed temp  
    M104 S160                    ; set extruder temp to 160 for QGL w/o oozing
    M190 S{BED}                  ; wait for bed temp   
    G32                          ; home
    BED_MESH_PROFILE LOAD=default
    G1 Z0.6 X0 Y2 F4000.0        ; move to 0,0
    M109 S{EXTRUDER}             ; wait for extruder temp
    G92 E0.0                     ; reset extruder to 0
    G1 Z0.2 X40 E20 F1000.0      ; intro line
    G92 E0.0                     ; reset extruder to 0
    M400                         ; clear buffer
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
    STATUS_PRINTING
   
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:

    STATUS_BUSY
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 40) %}
        {% set z_safe = 40.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600    ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X150 Y{max_y} F3600         ; park nozzle at rear
    M84                            ; disable steppers
    BED_MESH_CLEAR
    M117 Print Complete.
    STOP_TEMP_MONITOR
    SET_FAN_SPEED FAN=exhaust_fan SPEED=1.0
    SET_FAN_SPEED FAN=cooling_fan SPEED=1.0
    UPDATE_DELAYED_GCODE ID=_DISABLE_EXHAUST DURATION=300     ; run exhaust for 5min after printing
    UPDATE_DELAYED_GCODE ID=_DISABLE_COOLING DURATION=300     ; run exhaust for 5min after printing
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=60
    STATUS_READY

[gcode_macro LOAD_FILAMENT]
gcode:
   WAKEUP
   M117 Loading filament...
   {% if printer[printer.toolhead.extruder].temperature < 200.0 %}
   STATUS_HEATING
   M117 Heating hotend...
   M109 S200
   {%endif%}
   STATUS_BUSY
   M117 Loading filament...
   M83                            ; set extruder to relative
   G1 E40 F300                    ; slower extrusion for hotend path
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
   UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
   STATUS_READY
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
  WAKEUP
  {% if printer[printer.toolhead.extruder].temperature < 200.0 %}
    STATUS_HEATING
    M117 Heating hotend...
    M109 S200
  {% endif %}
  STATUS_BUSY
  M117 Unloading filament...
  M83                            ; set extruder to relative
  G1 E10 F300                    ; extrude a little to soften tip
  G1 E-40 F1800                 ; retract filament completely
  M82                            ; set extruder to absolute
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  STATUS_READY

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
variable_extrude: 2.0

gcode:
  STATUS_BUSY
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  #{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  #{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set x_park = 25.0 |float %}
  {% set y_park = 25.0 |float  %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 40.0) %}
      {% set z_safe = act_z + 40.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  M118 Parking at X:{x_park} Y:{y_park} Z:{z_safe}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  G1 X{x_park} Y{y_park} F4000
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### end of definitions #####
  G91
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  STATUS_PRINTING
  BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  STATUS_BUSY
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 40.0) %}
      {% set z_safe = act_z + 40.0 %}
  {% else %}
      {% set z_safe = max_z %}
  {% endif %}
  M117 Moving to {z_safe} to cancel...
  G90
  G1 Z{z_safe}
  G92 E0                         ; zero the extruder
  G1 E-4.0 F3600                 ; retract filament
  M84 ; disable steppers
  TURN_OFF_HEATERS
  M106 S0
  CLEAR_PAUSE
  SDCARD_RESET_FILE
#   SET_LED LED=displayStatus RED=0.2 GREEN=0.2 BLUE=0.2
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  STATUS_READY
  BASE_CANCEL_PRINT

[gcode_macro M600]
gcode:
    PAUSE
    M117 Paused
    M118 Print paused for filament change... type "Resume" to continue

## Use:
##   - DUMP_WARNINGS
[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% if 'warnings' not in printer.configfile %}
      {action_respond_info("klipper to old! Please update klipper first and run again")}
  {% else %}
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}
  {% endif %}
